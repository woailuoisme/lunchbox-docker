# Traefik 动态配置文件
# 适配 Lunchbox 项目实际服务

# TCP 路由配置（数据库服务）
tcp:
  routers:
    # PostgreSQL 数据库路由
    postgres:
      entryPoints:
        - "postgres"
      rule: "HostSNI(`*`)"
      service: "postgres"
      tls:
        passthrough: true
        options: "default-tcp"

    # Redis 缓存路由
    redis:
      entryPoints:
        - "redis"
      rule: "HostSNI(`*`)"
      service: "redis"
      tls:
        passthrough: true
        options: "default-tcp"

    # RabbitMQ 消息队列路由
    rabbitmq:
      entryPoints:
        - "rabbitmq"
      rule: "HostSNI(`*`)"
      service: "rabbitmq"
      tls:
        passthrough: true
        options: "default-tcp"

    # PgBouncer 连接池路由
    pgbouncer:
      entryPoints:
        - "pgbouncer"
      rule: "HostSNI(`*`)"
      service: "pgbouncer"
      tls:
        passthrough: true
        options: "default-tcp"

  services:
    # PostgreSQL 服务
    postgres:
      loadBalancer:
        servers:
          - address: "postgres:5432"
        terminationDelay: 100

    # Redis 服务
    redis:
      loadBalancer:
        servers:
          - address: "redis:6379"
        terminationDelay: 100

    # RabbitMQ 服务
    rabbitmq:
      loadBalancer:
        servers:
          - address: "rabbitmq:5672"
        terminationDelay: 100

    # PgBouncer 服务
    pgbouncer:
      loadBalancer:
        servers:
          - address: "pgbouncer:6432"
        terminationDelay: 100

# HTTP 路由配置
http:
  routers:
    # Traefik Dashboard 路由
    traefik-dashboard:
      entryPoints:
        - "websecure"
      rule: "Host(`traefik.${DOMAIN}`)"
      service: "api@internal"
      middlewares:
        - "auth-basic"
        - "secureHeaders@file"
        - "noFLoC@file"
      tls:
        certResolver: "letsencrypt"

    # 高优先级应用
    high-priority-apps:
      # 主应用路由
      app:
        entryPoints:
          - "websecure"
        priority: 10
        service: "nginx"
        middlewares:
          - "secureHeaders@file"
          - "noFLoC@file"
          - "gzip@file"
        rule: "Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)"
        tls:
          certResolver: "letsencrypt"

      # 搜索服务路由
      meilisearch:
        entryPoints:
          - "websecure"
        priority: 10
        service: "meilisearch"
        middlewares:
          - "secureHeaders@file"
          - "noFLoC@file"
          - "gzip@file"
        rule: "Host(`search.${DOMAIN}`)"
        tls:
          certResolver: "letsencrypt"

    # 中优先级应用
    medium-priority-apps:
      # Portainer 容器管理
      portainer:
        entryPoints:
          - "websecure"
        priority: 20
        service: "portainer"
        middlewares:
          - "secureHeaders@file"
          - "noFLoC@file"
        rule: "Host(`portainer.${DOMAIN}`)"
        tls:
          certResolver: "letsencrypt"

      # Dozzle 日志查看器
      dozzle:
        entryPoints:
          - "websecure"
        priority: 20
        service: "dozzle"
        middlewares:
          - "secureHeaders@file"
          - "noFLoC@file"
        rule: "Host(`logs.${DOMAIN}`)"
        tls:
          certResolver: "letsencrypt"

      # MinIO 对象存储
      minio:
        entryPoints:
          - "websecure"
        priority: 20
        service: "minio"
        middlewares:
          - "secureHeaders@file"
          - "noFLoC@file"
        rule: "Host(`minio.${DOMAIN}`)"
        tls:
          certResolver: "letsencrypt"

    # 低优先级应用
    low-priority-apps:
      # 错误页面服务
      error-pages:
        entryPoints:
          - "websecure"
        priority: 30
        service: "error-pages"
        middlewares:
          - "secureHeaders@file"
          - "noFLoC@file"
        rule: "Host(`error.${DOMAIN}`)"
        tls:
          certResolver: "letsencrypt"

      # 容器注册表
      registry:
        entryPoints:
          - "websecure"
        priority: 30
        service: "registry"
        middlewares:
          - "secureHeaders@file"
          - "noFLoC@file"
        rule: "Host(`registry.${DOMAIN}`)"
        tls:
          certResolver: "letsencrypt"

      # Watchtower 自动更新
      watchtower:
        entryPoints:
          - "websecure"
        priority: 30
        service: "watchtower"
        middlewares:
          - "secureHeaders@file"
          - "noFLoC@file"
        rule: "Host(`watchtower.${DOMAIN}`)"
        tls:
          certResolver: "letsencrypt"

  services:
    # Nginx Web 服务器
    nginx:
      loadBalancer:
        servers:
          - url: "http://nginx:80"
        healthCheck:
          path: "/"
          interval: "30s"
          timeout: "10s"
        passHostHeader: true

    # Portainer 服务
    portainer:
      loadBalancer:
        servers:
          - url: "http://portainer:9000"
        healthCheck:
          path: "/"
          interval: "30s"
          timeout: "5s"
        passHostHeader: true

    # Dozzle 服务
    dozzle:
      loadBalancer:
        servers:
          - url: "http://dozzle:8080"
        healthCheck:
          path: "/"
          interval: "30s"
          timeout: "5s"
        passHostHeader: true

    # MeiliSearch 服务
    meilisearch:
      loadBalancer:
        servers:
          - url: "http://meilisearch:7700"
        healthCheck:
          path: "/health"
          interval: "30s"
          timeout: "10s"
        passHostHeader: true

    # MinIO 服务
    minio:
      loadBalancer:
        servers:
          - url: "http://minio:9001"
        healthCheck:
          path: "/minio/health/live"
          interval: "30s"
          timeout: "5s"
        passHostHeader: true

    # 错误页面服务
    error-pages:
      loadBalancer:
        servers:
          - url: "http://error-pages:8080"
        healthCheck:
          path: "/"
          interval: "30s"
          timeout: "5s"
        passHostHeader: true

    # 容器注册表服务
    registry:
      loadBalancer:
        servers:
          - url: "http://registry:5000"
        healthCheck:
          path: "/v2/"
          interval: "30s"
          timeout: "5s"
        passHostHeader: true

    # Watchtower 服务
    watchtower:
      loadBalancer:
        servers:
          - url: "http://watchtower:8080"
        healthCheck:
          path: "/v1/metrics"
          interval: "30s"
          timeout: "5s"
        passHostHeader: true

  # 中间件配置
  middlewares:
    # 禁用 FLoC 跟踪
    noFLoC:
      headers:
        customResponseHeaders:
          Permissions-Policy: "interest-cohort=()"

    # 安全头中间件
    secureHeaders:
      headers:
        browserXssFilter: true
        contentTypeNosniff: true
        forceSTSHeader: true
        frameDeny: true
        referrerPolicy: "strict-origin-when-cross-origin"
        stsIncludeSubdomains: true
        stsPreload: true
        stsSeconds: 31536000
        hostsProxyHeaders:
          - "X-Forwarded-Host"
          - "X-Forwarded-Proto"
          - "X-Forwarded-For"
        customResponseHeaders:
          X-Content-Type-Options: "nosniff"
          X-Frame-Options: "DENY"
          X-XSS-Protection: "1; mode=block"
          Referrer-Policy: "strict-origin-when-cross-origin"
          Permissions-Policy: "geolocation=(), microphone=(), camera=()"

    # 错误页面中间件
    error-pages:
      errors:
        status:
          - "400-599"
        service: "error-pages"
        query: "/{status}"

    # Gzip 压缩中间件
    gzip:
      compress:
        excludedContentTypes:
          - "application/octet-stream"
          - "image/png"
          - "image/jpeg"
          - "image/gif"
          - "image/webp"
          - "video/mp4"
          - "video/webm"
          - "application/pdf"

    # 基础认证中间件
    auth-basic:
      basicAuth:
        users:
          - "admin:$2y$10$example_hashed_password_here"

  # TLS 选项
  tls:
    options:
      default-tcp:
        minVersion: "VersionTLS12"
        sniStrict: true
