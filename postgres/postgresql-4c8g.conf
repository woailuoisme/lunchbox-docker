# =============================================================================
# PostgreSQL 17.6 服务器优化 (4核8G内存)
# 在原有1核1G低配模板基础上进行升级优化
# =============================================================================

# -----------------------------------------------------------------------------
# 基础连接设置 (提升并发)
# -----------------------------------------------------------------------------
listen_addresses = '*'
port = 5432
max_connections = 100                   # ↑↑↑ 大幅提升，支持更高并发
superuser_reserved_connections = 3      # 略增保留连接
authentication_timeout = 60s

# -----------------------------------------------------------------------------
# 内存设置 (核心优化区 - 充分利用8G内存)
# -----------------------------------------------------------------------------
shared_buffers = 2GB                    # ↑↑↑ 提升至内存的25%，主要缓存区
effective_cache_size = 6GB              # ↑↑↑ 提示优化器系统有大量可用缓存
work_mem = 16MB                         # ↑↑↑ 大幅提升，允许更复杂的排序和哈希操作
maintenance_work_mem = 512MB            # ↑↑↑ 大幅提升，加速VACUUM和索引创建
temp_buffers = 16MB                     # ↑↑↑ 提升临时缓冲区
dynamic_shared_memory_type = posix      # 保持posix

# -----------------------------------------------------------------------------
# WAL 设置 (适当提升)
# -----------------------------------------------------------------------------
wal_level = replica                     # ↑↑↑ 启用，支持逻辑复制和更全面的备份
wal_buffers = 16MB                      # ↑↑↑ 提升WAL缓冲区，减少IO
checkpoint_completion_target = 0.9      # 保持平滑检查点
max_wal_size = 2GB                      # ↑↑↑ 大幅提升，减少检查点频率
min_wal_size = 1GB                      # ↑↑↑ 提升
checkpoint_timeout = 15min              # 保持

# -----------------------------------------------------------------------------
# 查询优化 (多核优化)
# -----------------------------------------------------------------------------
random_page_cost = 1.1                  # ↓↓↓ 假设使用SSD，大幅降低随机IO成本
seq_page_cost = 1.0
effective_io_concurrency = 200          # ↑↑↑ SSD支持高并发IO

# -----------------------------------------------------------------------------
# 并行查询 (启用多核加速)
# -----------------------------------------------------------------------------
max_parallel_workers = 8                # ↑↑↑ 总并行工作进程数
max_parallel_workers_per_gather = 4     # ↑↑↑ 单查询最多使用4个 workers (与核心数匹配)
max_parallel_maintenance_workers = 2    # ↑↑↑ 维护操作也可并行
parallel_leader_participation = on

# -----------------------------------------------------------------------------
# 日志设置 (保持Docker优化，可适当增加日志细节)
# -----------------------------------------------------------------------------
log_destination = 'stderr'
logging_collector = off                 # Docker环境下保持关闭
log_min_messages = warning              # ↑↑↑ 记录警告及以上级别
log_min_duration_statement = 1000       # ↑↑↑ 记录超过1秒的慢查询 (更敏感)
log_connections = off
log_disconnections = off
log_line_prefix = '%t [%p]: '
log_checkpoints = on                    # ↑↑↑ 可开启检查点日志以方便调试
log_autovacuum_min_duration = 250ms     # 记录执行时间超过250ms的autovacuum

# -----------------------------------------------------------------------------
# 自动清理 (增加清理能力)
# -----------------------------------------------------------------------------
autovacuum = on
autovacuum_max_workers = 3              # ↑↑↑ 增加清理进程数
autovacuum_naptime = 1min               # ↓↓↓ 缩短清理间隔，更及时
autovacuum_vacuum_scale_factor = 0.1    # ↓↓↓ 降低阈值，更频繁清理死元组
autovacuum_analyze_scale_factor = 0.05  # ↓↓↓ 降低阈值，更频繁更新统计信息
autovacuum_vacuum_cost_delay = 2ms      # ↓↓↓ 减少清理操作的延迟
autovacuum_vacuum_cost_limit = 2000     # ↑↑↑ 提高清理操作的成本限制，使其更积极
autovacuum_work_mem = 64MB              # ↑↑↑ 提升清理可用内存

# -----------------------------------------------------------------------------
# 统计信息 (提升优化器决策能力)
# -----------------------------------------------------------------------------
track_activities = on
track_counts = on
track_io_timing = on                    # ↑↑↑ 开启IO计时，帮助诊断性能问题
default_statistics_target = 100         # ↑↑↑ 提升统计信息详细度，使优化器计划更准确
# 可考虑启用 pg_stat_statements 扩展进行深度查询监控
# shared_preload_libraries = 'pg_stat_statements'

# -----------------------------------------------------------------------------
# 客户端连接默认设置
# -----------------------------------------------------------------------------
default_transaction_isolation = 'read committed'
statement_timeout = 60000               # 60秒超时 (可根据业务调整)
lock_timeout = 30000                    # 30秒锁超时
idle_in_transaction_session_timeout = 120000  # 2分钟空闲超时
client_encoding = utf8
timezone = 'Asia/Shanghai'
datestyle = 'iso, mdy'

# -----------------------------------------------------------------------------
# 锁管理
# -----------------------------------------------------------------------------
deadlock_timeout = 1s
max_locks_per_transaction = 64          # ↑↑↑ 提升锁数量，适应更复杂的业务

# -----------------------------------------------------------------------------
# 后台写入优化
# -----------------------------------------------------------------------------
bgwriter_delay = 10ms                   # ↓↓↓ 减少延迟，更频繁刷脏页
bgwriter_lru_maxpages = 1000            # ↑↑↑ 每轮写入更多页
bgwriter_lru_multiplier = 2.0           # ↑↑↑ 更积极的后台写入

# =============================================================================
# 4核8G 服务器优化结束
# =============================================================================
