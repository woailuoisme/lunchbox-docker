name: Build and Push Docker Images

on:
  workflow_dispatch:
    inputs:
      service:
        description: "选择要构建的服务"
        required: false
        type: choice
        default: all
        options:
          - all
          - certbot
          - nginx
          - php-fpm
          - postgres
          - pgbouncer
          - redis
          - rabbitmq
          - portainer
          - minio
          - authelia
          - postgis
      push_images:
        description: "是否推送镜像到注册表"
        required: false
        type: boolean
        default: true
      registries:
        description: "选择要推送的注册表"
        required: false
        type: choice
        default: all
        options:
          - all
          - dockerhub
          - tencent
          - redhat
          - ghcr

env:
  # Registry URLs
  DOCKERHUB_REGISTRY: docker.io
  TENCENT_REGISTRY: ccr.ccs.tencentyun.com
  REDHAT_REGISTRY: quay.io
  GHCR_REGISTRY: ghcr.io

  # Image names
  DOCKERHUB_NAMESPACE: jiaoio
  TENCENT_NAMESPACE: jiaoio
  REDHAT_NAMESPACE: jiaoio
  GHCR_NAMESPACE: woailuoisme

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-services.outputs.services }}
      registries: ${{ steps.set-registries.outputs.registries }}
    steps:
      - name: Set services based on input
        id: set-services
        run: |
          if [ "${{ github.event.inputs.service }}" == "all" ] || [ -z "${{ github.event.inputs.service }}" ]; then
            echo "services=['certbot','nginx','php-fpm','postgres','pgbouncer','redis','rabbitmq','portainer','minio','authelia','postgis']" >> $GITHUB_OUTPUT
          else
            echo "services=['${{ github.event.inputs.service }}']" >> $GITHUB_OUTPUT
          fi

      - name: Set registries based on input
        id: set-registries
        run: |
          if [ "${{ github.event.inputs.registries }}" == "all" ] || [ -z "${{ github.event.inputs.registries }}" ]; then
            echo "registries=['dockerhub','tencent','redhat','ghcr']" >> $GITHUB_OUTPUT
          else
            echo "registries=['${{ github.event.inputs.registries }}']" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        service: ${{ fromJSON(needs.setup.outputs.services) }}
        include:
          - service: certbot
            context: ./certbot
            dockerfile: Dockerfile
          - service: nginx
            context: ./nginx
            dockerfile: Dockerfile
          - service: php-fpm
            context: ./php-fpm
            dockerfile: Dockerfile
          - service: postgres
            context: ./postgres
            dockerfile: Dockerfile
          - service: pgbouncer
            context: ./pgbouncer
            dockerfile: Dockerfile
          - service: redis
            context: ./redis
            dockerfile: Dockerfile
          - service: rabbitmq
            context: ./rabbitmq
            dockerfile: Dockerfile
          - service: portainer
            context: ./portainer
            dockerfile: Dockerfile
          - service: minio
            context: ./minio
            dockerfile: Dockerfile
          - service: authelia
            context: ./authelia
            dockerfile: Dockerfile
          - service: postgis
            context: ./postgis
            dockerfile: Dockerfile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1

      - name: Log in to Docker Hub
        if: contains(fromJSON(needs.setup.outputs.registries), 'dockerhub')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to Tencent Cloud Registry
        if: contains(fromJSON(needs.setup.outputs.registries), 'tencent')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.TENCENT_REGISTRY }}
          username: ${{ secrets.TENCENT_USERNAME }}
          password: ${{ secrets.TENCENT_PASSWORD }}

      - name: Log in to Red Hat Registry
        if: contains(fromJSON(needs.setup.outputs.registries), 'redhat')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REDHAT_REGISTRY }}
          username: ${{ secrets.REDHAT_USERNAME }}
          password: ${{ secrets.REDHAT_TOKEN }}

      - name: Log in to GitHub Container Registry
        if: contains(fromJSON(needs.setup.outputs.registries), 'ghcr')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ contains(fromJSON(needs.setup.outputs.registries), 'dockerhub') && format('{0}/{1}/{2}', env.DOCKERHUB_REGISTRY, env.DOCKERHUB_NAMESPACE, matrix.service) || '' }}
            ${{ contains(fromJSON(needs.setup.outputs.registries), 'tencent') && format('{0}/{1}/{2}', env.TENCENT_REGISTRY, env.TENCENT_NAMESPACE, matrix.service) || '' }}
            ${{ contains(fromJSON(needs.setup.outputs.registries), 'redhat') && format('{0}/{1}/{2}', env.REDHAT_REGISTRY, env.REDHAT_NAMESPACE, matrix.service) || '' }}
            ${{ contains(fromJSON(needs.setup.outputs.registries), 'ghcr') && format('{0}/{1}/{2}', env.GHCR_REGISTRY, env.GHCR_NAMESPACE, matrix.service) || '' }}
          tags: |
            type=raw,value=latest
            type=raw,value=alpine

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/${{ matrix.dockerfile || 'Dockerfile' }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || github.event.inputs.push_images == true) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Verify Docker image
        run: |
          echo "✅ 成功构建镜像: ${{ matrix.service }}"
          echo "镜像标签: ${{ steps.meta.outputs.tags }}"

  scan-images:
    runs-on: ubuntu-latest
    needs: [setup, build-and-push]
    if: github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || github.event.inputs.push_images == true)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: |
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_NAMESPACE }}/certbot:latest
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_NAMESPACE }}/nginx:latest
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_NAMESPACE }}/php-fpm:latest
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_NAMESPACE }}/postgres:latest
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_NAMESPACE }}/pgbouncer:latest
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_NAMESPACE }}/redis:latest
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_NAMESPACE }}/rabbitmq:latest
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_NAMESPACE }}/portainer:latest
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_NAMESPACE }}/minio:latest
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_NAMESPACE }}/authelia:latest
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_NAMESPACE }}/postgis:latest
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "HIGH,CRITICAL"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  summary:
    runs-on: ubuntu-latest
    needs: [setup, build-and-push, scan-images]
    if: always()

    steps:
      - name: Build Summary
        run: |
          echo "# 🐳 Docker 镜像构建摘要" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 构建状态" >> $GITHUB_STEP_SUMMARY
          echo "- **构建作业**: ${{ needs.build-and-push.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **安全扫描**: ${{ needs.scan-images.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🌐 目标注册表" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Hub: ${{ contains(fromJSON(needs.setup.outputs.registries), 'dockerhub') && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 腾讯云容器注册表: ${{ contains(fromJSON(needs.setup.outputs.registries), 'tencent') && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Red Hat Registry: ${{ contains(fromJSON(needs.setup.outputs.registries), 'redhat') && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Container Registry: ${{ contains(fromJSON(needs.setup.outputs.registries), 'ghcr') && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 构建的服务" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ join(fromJSON(needs.setup.outputs.services), ', ') }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🏷️ 镜像标签策略" >> $GITHUB_STEP_SUMMARY
          echo "- **所有服务**: latest, alpine" >> $GITHUB_STEP_SUMMARY

#  notify:
#    runs-on: ubuntu-latest
#    needs: [build-and-push, scan-images]
#    if: always() && github.event_name != 'pull_request'
#
#    steps:
#      - name: Send notification
#        uses: 8398a7/action-slack@3
#        with:
#          status: ${{ job.status }}
#          text: Docker images built and pushed successfully!
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#        if: always()
