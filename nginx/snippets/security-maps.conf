# 安全 Map 配置 - 用于检测恶意请求
# 此文件应该在 http 块中引入，在 server 块之前

# 1. 检测恶意 User-Agent
map $http_user_agent $bad_user_agent {
    default 0;

    # 空 User-Agent
    "" 1;

    # 扫描器和爬虫工具
    ~*sqlmap 1;
    ~*nikto 1;
    ~*nmap 1;
    ~*masscan 1;
    ~*nessus 1;
    ~*openvas 1;
    ~*metasploit 1;
    ~*acunetix 1;
    ~*burpsuite 1;
    ~*burp 1;
    ~*w3af 1;
    ~*dirbuster 1;
    ~*dirb 1;
    ~*gobuster 1;
    ~*wpscan 1;
    ~*havij 1;
    ~*pangolin 1;

    # 下载工具（可根据需求调整）
    # ~*wget 1;
    # ~*curl 1;  # 允许 curl 用于监控和测试
    ~*python-requests 1;
    ~*go-http-client 1;

    # 其他恶意工具
    ~*ZmEu 1;
    ~*libwww-perl 1;
    ~*HttpClient 1;
    ~*Java/1 1;
}

# 2. 检测 SQL 注入尝试（简化版，避免复杂转义）
map $query_string $bad_sql_injection {
    default 0;

    ~*union.*select 1;
    ~*select.*from 1;
    ~*insert.*into 1;
    ~*delete.*from 1;
    ~*drop.*table 1;
    ~*update.*set 1;
    ~*concat 1;
    ~*javascript: 1;
}

# 3. 检测路径遍历攻击（修复版 - 避免误报）
map $request_uri $bad_path_traversal {
    default 0;

    ~*\.\./\.\. 1;
    ~*\.\./etc/passwd 1;
    ~*proc/self/environ 1;
    ~*\.\./\.\./\.\. 1;
}

# 4. 检测无效的请求方法
map $request_method $bad_method {
    default 1;

    GET 0;
    POST 0;
    HEAD 0;
    PUT 0;
    DELETE 0;
    OPTIONS 0;
    PATCH 0;
}

# 5. 组合检测 - 任何一个触发就标记为恶意
map "$bad_user_agent$bad_sql_injection$bad_path_traversal$bad_method" $is_bad_request {
    default 0;
    ~*1 1;
}
