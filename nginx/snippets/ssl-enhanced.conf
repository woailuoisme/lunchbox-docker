# SSL/TLS 增强配置 - Enhanced SSL Configuration
# 此文件提供更强的 SSL/TLS 安全配置
# 应该在 server {} 块中引入，配合 ssl.conf 使用

# 1. SSL Session 缓存和超时
# 提高 SSL 握手性能，同时保持安全性
ssl_session_cache shared:SSL:10m;     # 10MB 共享缓存，约可存储 40,000 个会话
ssl_session_timeout 10m;              # 会话超时 10 分钟
ssl_session_tickets off;              # 禁用 session tickets（可能存在安全风险）

# 2. OCSP Stapling
# 在线证书状态协议装订，提高验证速度和隐私性
ssl_stapling on;                      # 启用 OCSP stapling
ssl_stapling_verify on;               # 验证 OCSP 响应
# ssl_trusted_certificate /etc/nginx/ssl/chain.pem;  # 完整证书链（需要配置）
# 国内主用，国外备用
# resolver
#     119.29.29.29    # 国内-腾讯
#     114.114.114.114 # 国内-114
#     223.5.5.5       # 国内-阿里
#     8.8.8.8         # 国外-Google (备用)
#     1.1.1.1         # 国外-Cloudflare (备用)
#     valid=300s;
# resolver_timeout 5s;
# resolver
#     119.29.29.29    # 国内腾讯 - 响应快
#     1.1.1.1         # Cloudflare - 全球快
#     8.8.8.8         # Google - 稳定性好
#     valid=300s;
# resolver_timeout 5s;
# OCSP 解析器配置（使用可靠的 DNS 服务器）
resolver 8.8.8.8 8.8.4.4 1.1.1.1 valid=300s;
resolver_timeout 5s;

# 3. SSL 优先级
# 优先使用服务器端的加密套件顺序
ssl_prefer_server_ciphers on;

# 4. Diffie-Hellman 参数
# 增强密钥交换安全性（需要提前生成）
# 生成命令: openssl dhparam -out /etc/nginx/ssl/dhparam.pem 4096
# ssl_dhparam /etc/nginx/ssl/dhparam.pem;

# 5. SSL 缓冲区大小优化
# 针对不同的网络条件优化
ssl_buffer_size 4k;  # 较小的缓冲区，减少首字节时间（TTFB）
# 对于大文件传输，可以设置为 16k

# 6. 早期数据支持（TLS 1.3）
# 注意：可能存在重放攻击风险，谨慎使用
# ssl_early_data on;

# 7. 安全响应头（SSL 特定）
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

# 8. SSL 证书透明度（Certificate Transparency）
# 如果使用支持 CT 的证书，可以启用
# ssl_ct on;
# ssl_ct_static_scts /path/to/scts;

# 使用示例：
# ============================================
# server {
#     listen 443 ssl http2;
#     server_name example.com;
#
#     # 证书配置
#     ssl_certificate /etc/nginx/ssl/example.com.crt;
#     ssl_certificate_key /etc/nginx/ssl/example.com.key;
#
#     # 基础 SSL 配置
#     include /etc/nginx/snippets/ssl.conf;
#
#     # 增强 SSL 配置
#     include /etc/nginx/snippets/ssl-enhanced.conf;
#
#     # 其他配置...
# }
# ============================================

# 生产环境部署前检查清单：
# ============================================
# [ ] 生成 DH 参数文件（可选但推荐）
#     openssl dhparam -out /etc/nginx/ssl/dhparam.pem 4096
#
# [ ] 准备完整证书链（用于 OCSP stapling）
#     cat intermediate.crt root.crt > chain.pem
#
# [ ] 测试 SSL 配置
#     nginx -t
#
# [ ] 测试 OCSP stapling
#     openssl s_client -connect example.com:443 -status
#
# [ ] 在线 SSL 测试
#     https://www.ssllabs.com/ssltest/
#
# [ ] 验证 HSTS 头
#     curl -I https://example.com | grep Strict-Transport-Security
#
# [ ] 检查证书有效期
#     openssl x509 -in /etc/nginx/ssl/example.com.crt -noout -dates
# ============================================

# 性能说明：
# - ssl_session_cache 可显著减少 SSL 握手开销
# - OCSP stapling 减少客户端证书验证时间
# - ssl_buffer_size 4k 适合 HTTP/2 和小请求
# - 这些配置对 HTTPS 性能有正面影响

# 安全说明：
# - 禁用 ssl_session_tickets 防止某些攻击向量
# - OCSP stapling 提高隐私性（客户端不直接查询 CA）
# - DH 参数增强前向保密性
# - 较短的 session timeout 提高安全性

# 兼容性说明：
# - 这些配置兼容现代浏览器（Chrome 90+, Firefox 88+, Safari 14+）
# - 如需支持老旧客户端，需要调整 ssl_protocols 和 ssl_ciphers
# - 建议定期检查浏览器兼容性

# 监控建议：
# - 监控 SSL 握手失败率
# - 检查 OCSP stapling 状态
# - 跟踪 SSL 错误日志
# - 定期续订证书（建议使用自动化工具如 certbot）

# 更新提醒：
# - TLS 1.3 现已广泛支持，优先使用
# - 定期审查加密套件列表
# - 关注 SSL/TLS 安全公告
# - 考虑使用自动化证书管理（Let's Encrypt）
