# 速率限制配置片段
# 用于防止DDoS攻击和暴力破解

# 全局限流区域定义
# 注意：这些配置应该在 http 块中定义
# 注意：以下限流区域已在主配置文件中定义，请勿重复定义：
# - auth_login (5r/m)
# - auth_global (10r/s)
# - general (30r/s)
# - global_base (10r/s)

# 1. 注册和密码重置接口 - 严格限制
# 防止恶意注册和密码重置攻击
# 注意：此区域在主配置文件中未定义，可以安全使用
limit_req_zone $binary_remote_addr zone=auth_register:10m rate=10r/m;

# 2. API接口限制 - 中等限制
# 保护API端点免受滥用
# 注意：此区域在主配置文件中未定义，可以安全使用
limit_req_zone $binary_remote_addr zone=api_requests:10m rate=30r/m;

# 3. 静态资源限制 - 宽松限制
# 防止资源滥用
# 注意：此区域在主配置文件中未定义，可以安全使用
limit_req_zone $binary_remote_addr zone=static_assets:10m rate=100r/m;

# 4. 基于地理位置的限流（可选）
# 如果使用geo模块，可以针对特定地区进行限制
# geo $limited_country {
#     default 0;
#     # 添加需要限制的国家代码
#     # CN 1;
#     # RU 1;
# }
# limit_req_zone $limited_country zone=geo_limit:10m rate=5r/s;

# 5. 基于用户代理的限流
# 针对特定爬虫或工具进行限制
map $http_user_agent $is_crawler {
    default 0;
    ~*(bot|crawler|spider|scraper) 1;
}
limit_req_zone $is_crawler zone=crawler_limit:10m rate=2r/s;

# 6. 连接数限制（已在主配置文件中定义）
# 防止连接耗尽攻击
# 注意：以下连接限制区域已在主配置文件中定义，请勿重复定义：
# - conn_per_ip
# - conn_per_server
# limit_conn_zone $binary_remote_addr zone=conn_per_ip:10m;
# limit_conn_zone $server_name zone=conn_per_server:10m;

# 限流应用示例（在 location 块中使用）：
#
# location /api/login {
#     limit_req zone=auth_login burst=10 nodelay;
#     limit_req_status 429;
#     # 其他配置...
# }
#
# location /api/ {
#     limit_req zone=api_requests burst=50 nodelay;
#     limit_req_status 429;
#     limit_conn conn_per_ip 10;
#     # 其他配置...
# }
#
# location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
#     limit_req zone=static_assets burst=200 nodelay;
#     limit_req_status 429;
#     expires 1y;
#     add_header Cache-Control "public, immutable";
# }

# 参数说明：
# - zone: 使用的限流区域
# - burst: 突发请求数量（超过速率后的缓冲）
# - nodelay: 立即处理突发请求（不延迟）
# - delay: 延迟处理突发请求
# - limit_req_status: 超过限制时返回的状态码（默认503）

# 最佳实践：
# 1. 针对不同场景设置不同的限流策略
# 2. 为关键接口设置更严格的限制
# 3. 使用合理的burst值避免误伤正常用户
# 4. 监控限流日志，根据实际情况调整参数
