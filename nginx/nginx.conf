user www-data;
worker_processes auto;
pid /var/run/nginx.pid;
daemon off;

# 安全相关配置
worker_rlimit_nofile 65535;

events {
  worker_connections 2048;
  multi_accept on;
  use epoll;
  # accept_mutex on;
  #    - 启用连接接受互斥锁，防止"惊群"现象
  #    - 当有新连接到达时，只有一个worker进程会被唤醒处理
  #    - 减少CPU上下文切换，提高性能（特别是在高并发场景）
  #
  # accept_mutex_delay 100ms;
  #    - 设置互斥锁延迟时间为100毫秒
  #    - 当worker进程无法立即获得锁时，等待100ms后重试
  #    - 平衡锁竞争和响应延迟
  #
  # 注意：在现代Linux系统上，如果使用epoll和reuseport，
  # 可能不需要启用accept_mutex，系统内核会自动处理负载均衡
  accept_mutex on;
  accept_mutex_delay 100ms;
}

stream {
    # PostgreSQL TCP 代理配置
    include /etc/nginx/snippets/postgres.conf;

    # Redis TCP 代理配置
    include /etc/nginx/snippets/redis.conf;
}

http {
  server_tokens off;
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 15;
  types_hash_max_size 2048;
  client_max_body_size 20M;
  proxy_headers_hash_max_size 1024;
  proxy_headers_hash_bucket_size 128;

  # 安全缓冲区设置
  client_body_buffer_size 1k;
  client_header_buffer_size 1k;
  large_client_header_buffers 2 1k;

  # 安全超时设置
  client_body_timeout 10;
  client_header_timeout 10;
  send_timeout 10;

  # 连接限制区域定义
  # limit_conn_zone $binary_remote_addr zone=conn_per_ip:10m;
  #    - 基于客户端IP地址创建连接限制区域
  #    - $binary_remote_addr: 客户端IP的二进制表示（节省内存）
  #    - zone=conn_per_ip: 区域名称为conn_per_ip
  #    - 10m: 分配10MB内存用于存储连接状态（可存储约16万个IP地址）
  #
  # limit_conn_zone $server_name zone=conn_per_server:10m;
  #    - 基于服务器名称创建连接限制区域
  #    - $server_name: 当前虚拟主机的服务器名称
  #    - zone=conn_per_server: 区域名称为conn_per_server
  #    - 10m: 分配10MB内存用于存储连接状态
  #
  # 注意：这些区域定义需要在http块中，实际限制在server或location块中应用
  limit_conn_zone $binary_remote_addr zone=conn_per_ip:10m;
  limit_conn_zone $server_name zone=conn_per_server:10m;

  # 添加 resolver 配置（Docker 内部 DNS）
  resolver 127.0.0.11 valid=30s;  # valid=30s 表示缓存 30 秒
  resolver_timeout 10s;           # 解析超时时间

  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  # 安全检测 Map 配置（必须在 server 块之前）
  include /etc/nginx/snippets/security-maps.conf;

  # 速率限制配置
  include /etc/nginx/snippets/rate-limiting.conf;

  # 全局错误页面配置（HTTP 块级别）
  include /etc/nginx/snippets/error-pages-global.conf;

  # 日志设置
  access_log /dev/stdout;
  error_log /dev/stderr;
    # 1. 先用 map 指令定义自定义时间：将 $time_iso8601 的 "T" 替换为空格
  map $time_iso8601 $custom_time {
    default "${time_iso8601}";  # 默认值（防止解析失败）
    ~^(.*)T(.*)[+-].*$ "$1 $2";   # 正则匹配：提取 "T" 前后内容，用空格拼接
    # 正则说明：
    # ^(.*)T → 匹配 "T" 前的内容（如 "2025-09-26"）
    # (.*)[+-].*$ → 匹配 "T" 后、时区前的内容（如 "17:38:49"）
    # 最终拼接为 "2025-09-26 17:38:49"
  }
  # 2. 在 log_format 中引用自定义时间 $custom_time
  log_format  main  '$remote_addr - $remote_user [$custom_time] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

  gzip on;
  gzip_disable "msie6";
  gzip_comp_level 5;
  gzip_min_length 256;
  gzip_proxied any;
  gzip_vary on;

  gzip_types
  application/atom+xml
  application/javascript
  application/json
  application/rss+xml
  application/vnd.ms-fontobject
  application/x-font-ttf
  application/x-web-app-manifest+json
  application/xhtml+xml
  application/xml
  font/opentype
  image/svg+xml
  image/x-icon
  text/css
  text/plain
  text/x-component;

  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

  # 限流区域配置
  # limit_req_zone 参数说明：
  # - $binary_remote_addr：使用客户端IP地址的二进制表示作为键
  # - zone=auth_login:10m：创建名为auth_login的共享内存区域，大小10MB，用于存储IP地址访问记录
  # - rate=5r/m：限制速率为每分钟5个请求
  # - rate=10r/s：限制速率为每秒10个请求
  # - rate=30r/s：限制速率为每秒30个请求
  #
  # 速率限制策略说明：
  # 1. auth_login (5r/m) - 登录接口，防止暴力破解
  # 2. auth_global (10r/s) - 认证相关接口，中等保护
  # 3. general (30r/s) - 一般API和页面，宽松限制
  #
  # 实际应用时配合 burst 参数使用：
  # - burst: 突发请求缓冲数量
  # - nodelay: 立即处理突发请求（不延迟）
  # - delay: 延迟处理突发请求
  # - limit_req_status: 超过限制时返回的状态码（默认503）

  # 认证登录相关接口的限流 - 最严格（每分钟5个请求）
  limit_req_zone $binary_remote_addr zone=auth_login:10m rate=5r/m;

  # 全局认证相关接口的限流 - 中等严格（每秒10个请求）
  limit_req_zone $binary_remote_addr zone=auth_global:10m rate=10r/s;

  # 一般API和页面访问的限流 - 较宽松（每秒30个请求）
  limit_req_zone $binary_remote_addr zone=general:10m rate=30r/s;

    # 默认server配置 - 统一错误处理
    # 这个配置会捕获所有未匹配的域名请求，提供统一的错误页面处理
    server {
      listen 80 default_server;
      listen 443 ssl;
      server_name _;  # 匹配所有未被其他 server 处理的请求

      # 连接限制配置
      # limit_conn conn_per_ip 10;
      #    - 限制单个客户端IP地址最多同时建立10个连接
      #    - 防止单个IP发起连接耗尽攻击
      #    - 适用于防止DDoS攻击和资源滥用
      #
      # limit_conn conn_per_server 100;
      #    - 限制整个服务器最多同时处理100个连接
      #    - 防止服务器资源被耗尽
      #    - 保护服务器稳定性，避免过载
      #
      # 注意：这些限制需要根据实际业务需求和服务器性能进行调整
      # 对于高并发场景，可能需要适当提高限制值
#       limit_conn conn_per_ip 10;
#       limit_conn conn_per_server 100;

      # 引入通用配置
      include /etc/nginx/snippets/ssl.conf;
      include /etc/nginx/snippets/security-headers.conf;
      # 安全检查配置 - 检测恶意请求
      include /etc/nginx/snippets/security-checks.conf;
      # 安全过滤配置 - 屏蔽恶意扫描
      include /etc/nginx/snippets/security-filters.conf;
      # 错误页面 location 配置
      include /etc/nginx/snippets/error-pages-location.conf;

      # 全局限流配置
      # limit_req zone=global_base burst=20 nodelay;
      #    - zone=global_base: 使用全局基础限流区域
      #    - burst=20: 允许突发20个请求（超过基础速率后的缓冲）
      #    - nodelay: 立即处理突发请求，不延迟
      #    - 超过限制的请求会立即返回429状态码
      #
      # limit_req_status 429;
      #    - 设置限流返回状态码为429（Too Many Requests）
      #    - 比默认的503状态码更友好，明确表示请求频率过高
      #
      # 这种配置适合作为兜底保护，防止IP级别的DDoS攻击
#       limit_req zone=global_base burst=20 nodelay;
#       limit_req_status 429;
    }

  include /etc/nginx/conf.d/*.conf;
  include /etc/nginx/sites-available/*.conf;

  open_file_cache off; # Disabled for issue 619
  charset UTF-8;

  # 文件缓存安全设置
  open_file_cache_valid 30s;
  open_file_cache_min_uses 2;
  open_file_cache_errors on;
}
