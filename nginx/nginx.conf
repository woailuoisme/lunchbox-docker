user www-data;
worker_processes auto;
pid /var/run/nginx.pid;
daemon off;

events {
  worker_connections 2048;
  multi_accept on;
  use epoll;
}

stream {
    # PostgreSQL TCP 代理配置
    include /etc/nginx/snippets/postgres.conf;
}

http {
  server_tokens off;
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 15;
  types_hash_max_size 2048;
  client_max_body_size 20M;
  proxy_headers_hash_max_size 1024;
  proxy_headers_hash_bucket_size 128;

  # 添加 resolver 配置（Docker 内部 DNS）
  resolver 127.0.0.11 valid=30s;  # valid=30s 表示缓存 30 秒
  resolver_timeout 10s;           # 解析超时时间

  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  # 安全检测 Map 配置（必须在 server 块之前）
  include /etc/nginx/snippets/security-maps.conf;

  # 全局错误页面配置（HTTP 块级别）
  include /etc/nginx/snippets/error-pages-global.conf;

  # 日志设置
  access_log /dev/stdout;
  error_log /dev/stderr;
    # 1. 先用 map 指令定义自定义时间：将 $time_iso8601 的 "T" 替换为空格
  map $time_iso8601 $custom_time {
    default "${time_iso8601}";  # 默认值（防止解析失败）
    ~^(.*)T(.*)[+-].*$ "$1 $2";   # 正则匹配：提取 "T" 前后内容，用空格拼接
    # 正则说明：
    # ^(.*)T → 匹配 "T" 前的内容（如 "2025-09-26"）
    # (.*)[+-].*$ → 匹配 "T" 后、时区前的内容（如 "17:38:49"）
    # 最终拼接为 "2025-09-26 17:38:49"
  }
  # 2. 在 log_format 中引用自定义时间 $custom_time
  log_format  main  '$remote_addr - $remote_user [$custom_time] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

  gzip on;
  gzip_disable "msie6";
  gzip_comp_level 5;
  gzip_min_length 256;
  gzip_proxied any;
  gzip_vary on;

  gzip_types
  application/atom+xml
  application/javascript
  application/json
  application/rss+xml
  application/vnd.ms-fontobject
  application/x-font-ttf
  application/x-web-app-manifest+json
  application/xhtml+xml
  application/xml
  font/opentype
  image/svg+xml
  image/x-icon
  text/css
  text/plain
  text/x-component;

  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

  # 限流区域配置
  # limit_req_zone 参数说明：
  # - $binary_remote_addr：使用客户端IP地址的二进制表示作为键
  # - zone=auth_login:10m：创建名为auth_login的共享内存区域，大小10MB，用于存储IP地址访问记录
  # - rate=5r/m：限制速率为每分钟5个请求
  # - rate=10r/s：限制速率为每秒10个请求
  # - rate=30r/s：限制速率为每秒30个请求

  # 认证登录相关接口的限流 - 最严格（每分钟5个请求）
  limit_req_zone $binary_remote_addr zone=auth_login:10m rate=5r/m;

  # 全局认证相关接口的限流 - 中等严格（每秒10个请求）
  limit_req_zone $binary_remote_addr zone=auth_global:10m rate=10r/s;

  # 一般API和页面访问的限流 - 较宽松（每秒30个请求）
  limit_req_zone $binary_remote_addr zone=general:10m rate=30r/s;

    # 默认server配置 - 统一错误处理
    # 这个配置会捕获所有未匹配的域名请求，提供统一的错误页面处理
    server {
      listen 80 default_server;
      listen 443 ssl;
      server_name _;  # 匹配所有未被其他 server 处理的请求
       # 引入通用配置
      include /etc/nginx/snippets/ssl.conf;
      include /etc/nginx/snippets/security-headers.conf;
      # 安全检查配置 - 检测恶意请求
      include /etc/nginx/snippets/security-checks.conf;
      # 安全过滤配置 - 屏蔽恶意扫描
      include /etc/nginx/snippets/security-filters.conf;
      # 错误页面 location 配置
      include /etc/nginx/snippets/error-pages-location.conf;
    }

  include /etc/nginx/conf.d/*.conf;
  include /etc/nginx/sites-available/*.conf;



  open_file_cache off; # Disabled for issue 619
  charset UTF-8;
}
